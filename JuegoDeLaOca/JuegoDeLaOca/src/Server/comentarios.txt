/*
public class Server {
	private static int PUERTO = 8855;
    private static int NUM_MAX_JUGADORES = 4;
    private static CountDownLatch counter = new CountDownLatch(4);
	//private static ArrayList<String> listaNombres;
	 
    public static void main(String[] args) {
    	
       

       ExecutorService es = Executors.newFixedThreadPool(4); //Máximo de jugadores
       
       try(ServerSocket servidor = new ServerSocket(PUERTO)) {
            
            System.out.println("Servidor iniciado. Esperando clientes...");
            Socket cliente = null;

            Thread esperaClientesThread = new Thread(() -> {
                while (true) {
                    try {
                        Socket clientSocket = servidor.accept();

                        System.out.println("Cliente conectado");

                        SaludoCliente m = new SaludoCliente(clientSocket.getInputStream(), clientSocket.getOutputStream(), NUM_MAX_JUGADORES - (int)counter.getCount() );
                        m.run();
                        // Incrementar el contador de clientes
                        counter.countDown();

                        // Imprimir el número de clientes que aún se esperan
                        System.out.println("Clientes restantes: " + counter.getCount());

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });

            // Iniciar el hilo de espera de clientes
            esperaClientesThread.start();

            // Esperar a que se conecten todos los clientes
            counter.await();

            // Realiza acciones adicionales una vez que se alcanza el número de clientes esperados

            System.out.println("Número de clientes alcanzado. ¡Empieza la partida!.");

            // Detener el hilo de espera de clientes y cerrar el ServerSocket
            esperaClientesThread.interrupt();

            servidor.close();
            
        } catch (IOException e) {
            e.getCause();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } 
    }
}

class SaludoCliente implements Runnable { //Porque debe implementar runnable? Puede ser que lo podamos meter en la clase del servidor?

    private InputStream dis;
    private OutputStream dos;
    private int numCliente;

    public SaludoCliente(DataInputStream is, OutputStream os, int numeroCliente) {
        this.numCliente = numeroCliente;
        this.dis = DataInputStream(new is;
        this.dos = os;
    }

    @Override
    public void run() {
        try(){
           
            String clientName = dis.readUTF();
            System.out.println("¡Hola " + clientName + "!");

            //clienteManejado.close();
            //System.out.println("Cliente " + numeroCliente + " desconectado.");

        } catch (IOException e) {
            e.getCause();
        }
    }
}


/**
 * Objetivos: Que el servidor espere a que haya 4 clientes conectados.
 * Descubrir errores
 * Acentos ¿?
 * 
 * while (contadorClientes < 4) {
                
            	cliente = servidor.accept();
                
                contadorClientes++;
                
                System.out.println("Cliente " + contadorClientes + " conectado." );
                
                es.execute(new ManejadorCliente(cliente, contadorClientes)); //Considerar mandar el stream del socket
            }
            
            servidor.close();
 * 
 */




















package Server;

import java.io.*;
import java.net.*;

public class ClientHandler implements Runnable{
    private Socket client;
    private DataInputStream dis;
    private DataOutputStream dos;
    
    public ClientHandler(Socket s){
        this.client = s;
        try {
            dis = new DataInputStream(s.getInputStream());
            dos = new DataOutputStream(s.getOutputStream());
        } catch (IOException e) {
            e.getCause();
        }
    }

    @Override
    public void run() {
        try {
            while(true){
                
            }
        } catch(IOException e) {
            e.getCause();
        }
    }
    
}






package Server;

import java.io.*;
import java.net.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


public class Server {
    private static int PORT = 8080;
    private static int NUM_MAX_JUGADORES = 4; // Máximo de jugadores
    private static CountDownLatch counter = new CountDownLatch(4);
    ExecutorService es = Executors.newFixedThreadPool(NUM_MAX_JUGADORES);
    public static void main(String args[]) {
        
        try (ServerSocket s = new ServerSocket(PORT)) {

            System.out.println("[SERVIDOR] Esperando a los jugadores...");

            Thread esperaClientesThread = new Thread(() -> { // Esto se puede poner con el Executor(tengo que ver como exactamente) Pero se podria hacer una clase que implemente runnable para esto
                                                           
                while (counter.getCount() > 0) { // Basicamente seria la lógica de un clientHandler 1 (clienthandler 2 seria la logica de pasarle toda la partida)
                    try {
                        Socket c = s.accept();

                        DataInputStream dis = new DataInputStream(c.getInputStream());
                        String name = dis.readUTF();
                        System.out.println("[SERVER] Se ha conectado: " + name + ", ¡Hola!");

                        // Incrementar el contador de clientes
                        counter.countDown();

                        // Imprimir el número de clientes que aún se esperan
                        System.out.println("Clientes restantes: " + counter.getCount());

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });

           
            esperaClientesThread.start();  // Iniciar el hilo de espera de clientes
            
            counter.await(); // Esperar a que se conecten todos los clientes

            // Realiza acciones adicionales una vez que se alcanza el número de clientes esperados

            System.out.println("Número de clientes alcanzado. ¡Empieza la partida!.");

            
            esperaClientesThread.interrupt(); // Detener el hilo de espera de clientes 
            s.close(); // Cerrar el ServerSocket

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

